#!/usr/bin/env oh

define common: import: ... bin/common.oh

export _stdout_: open w: "/"::join $_origin_ generated.go

common::introduction @`(basename $0) $GOPACKAGE

echo "import (
	. \"github.com/michaelmacinnis/oh/pkg/cell\"
	\"strings\"
	\"unicode\"
)"

define t: quote: (add Add) (sub Subtract) (div Divide) \
                 (mod Modulo) (mul Multiply)

echo "\nfunc bindArithmetic(s *scope) {"
for $t: method (l) = {
	define n: l::get 0
	define m: l::get 1
	echo "
	s.DefineMethod(\"${n}\", func(t *Task, args Cell) bool {
		acc := Car(args).(Number)

		for Cdr(args) != Null {
			args = Cdr(args)
			acc = acc.${m}(Car(args))
		}

		return t.Return(acc)
	})"
}
echo "}"

define t: quote: (boolean 'NewBoolean(Car(args).Bool())') \
                 (float 'NewFloat(Car(args).(Atom).Float())') \
                 (integer 'NewInteger(Car(args).(Atom).Int())') \
                 (pipe 'NewPipe(nil, nil)') \
                 (rational 'NewRational(Car(args).(Atom).Rat())') \
                 (status 'NewStatus(Car(args).(Atom).Status())') \
                 (string 'NewString(Raw(Car(args)))') \
                 (symbol 'NewSymbol(Raw(Car(args)))')

echo "\nfunc bindGenerators(s *scope) {"
for $t: method (l) = {
	define n: l::get 0
	define o: l::get 1
	echo "
	s.DefineMethod(\"${n}\", func(t *Task, args Cell) bool {
		return t.Return(${o})
	})"
}
echo "}"

echo "\nfunc bindPredicates(s *scope) {"
for $common::predicates: method (l) = {
	define n: l::get 0
	define m: l::get 1
	echo "
	s.DefineMethod(\"${n}\", func(t *Task, args Cell) bool {
		return t.Return(NewBoolean(${m}(Car(args))))
	})"
}
echo "}"

define t: quote: \
        (eq '!prev.Equal(curr)' '') \
        (ge 'prev.Less(curr)' '.(Number)') \
        (gt '!prev.Greater(curr)' '.(Number)') \
        (is 'prev != curr' '') \
        (le 'prev.Greater(curr)' '.(Number)') \
        (lt '!prev.Less(curr)' '.(Number)')

echo "\nfunc bindRelational(s *scope) {"
for $t: method (l) = {
	define n: l::get 0
	define o: l::get 1
	define t: l::get 2
	echo "
	s.DefineMethod(\"${n}\", func(t *Task, args Cell) bool {
		prev := Car(args)${t}

		for Cdr(args) != Null {
			args = Cdr(args)
			curr := Car(args)${t}

			if ${o} {
				return t.Return(False)
			}

			prev = curr
		}

		return t.Return(True)
	})"
}
echo "}"

define t: quote: (DefineSyntax builtin 't.Closure(NewBuiltin)') \
                 (DefineSyntax define 't.LexicalVar(psExecDefine)') \
                 (DefineSyntax method 't.Closure(NewMethod)') \
                 (DefineSyntax syntax 't.Closure(NewSyntax)') \
                 (DefineMethod cons 't.Return(Cons(Car(args), Cadr(args)))') \
                 (DefineMethod list 't.Return(args)') \
                 (DefineMethod not 't.Return(NewBoolean(!Car(args).Bool()))') \
                 (DefineMethod reverse 't.Return(Reverse(Car(args)))')

echo "\nfunc bindTheRest(s *scope) {"
for $t: method (l) = {
	define d: l::get 0
	define n: l::get 1
	define o: l::get 2
	echo "
	s.${d}(\"${n}\", func(t *Task, args Cell) bool {
		return ${o}
	})"
}
echo "}"

echo "\nfunc bindStringPredicates(e context) {"

define t: quote: (is-control IsControl) (is-digit IsDigit) \
                 (is-graphic IsGraphic) (is-letter IsLetter) \
                 (is-lower IsLower) (is-mark IsMark) (is-print IsPrint) \
                 (is-punct IsPunct) (is-space IsSpace) (is-symbol IsSymbol) \
                 (is-title IsTitle) (is-upper IsUpper)

for $t: method (l) = {
	define n: l::get 0
	define m: l::get 1
	echo "
	e.PublicMethod(\"${n}\", func(t *Task, args Cell) bool {
		s := Raw(toString(t.Self()))

		for _, c := range s {
			if !unicode.${m}(c) {
				return t.Return(False)
			}
		}

		return t.Return(True)
	})"
}

define t: quote: (lower ToLower) (title ToTitle) (upper ToUpper)

for $t: method (l) = {
	define n: l::get 0
	define m: l::get 1
	echo "
	e.PublicMethod(\"${n}\", func(t *Task, args Cell) bool {
		s := Raw(toString(t.Self()))

		return t.Return(NewString(strings.${m}(s)))
	})"
}

echo "}"

