#!/usr/bin/env oh

module michaelmacinnis/oh/bin/common

export introduction: method (generator package) = {
	echo "// Released under an MIT license. See LICENSE."
	echo
	echo "// Generated by" $generator
	echo
	echo "package" $package
	echo
}

export predicates: quote: (is-atom IsAtom) (is-boolean IsBoolean) \
                          (is-builtin IsBuiltin) (is-channel IsChannel) \
                          (is-cons IsPair) (is-continuation IsContinuation) \
                          (is-float IsFloat) (is-integer IsInteger) \
                          (is-method IsMethod) (is-null IsNull) \
                          (is-number IsNumber) (is-object IsContext) \
                          (is-pipe IsPipe) (is-rational IsRational) \
                          (is-status IsStatus) (is-string IsString) \
                          (is-symbol IsSymbol) (is-syntax IsSyntax)

export apply-operators: method (operators operands) = {
    for $operators: method (name) = {
        define operator: eval: symbol: "$%s"::sprintf $name
        for $operands: method (op1) = {
            for $operands: method (op2) = {
                define result: operator $op1 $op2
                echo: "%s %v %v => %v"::sprintf $name $op1 $op2 $result
            }
        }
    }
}

export apply-predicates: method (x) = {
    for $predicates: method (names) = {
        define name: names::head
        define predicate: eval: symbol: "$%s"::sprintf $name
        write $name: "x => %v"::sprintf: predicate $x
    }
}
