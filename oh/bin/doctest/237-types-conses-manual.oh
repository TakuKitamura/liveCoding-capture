#!/usr/bin/env oh

## #### Lists
##
## Lists, in oh, are formed by chaining cons cells. A cons cell is a pair
## of values, referred to as the head and tail. The tail of each cons cell
## is set to the next cons cell in the list. The tail of the final element
## is set to empty list, which is written as `()`.
##
## The commands,
##
#{
write: cons 1 (cons 2 (cons 3 ()))
write: cons 1: cons 2: cons 3 ()
write: list 1 2 3
write: quote: 1 2 3
#}
##
## are equivalent. (The `quote` command tells oh not to evaluate the
## following expression).
##
#-     (1 2 3)
#-     (1 2 3)
#-     (1 2 3)
#-     (1 2 3)

## The head of a cons cell can be accessed using the `head` method. The
## tail of a cons cell can be accessed using the `tail` method. The `cons`
## command can be used to construct a new cons cell.
##
## The commands,
##
#{
write: (cons 11 12)::head
write: (cons 11 12)::tail
#}
##
## produce the output,
##
#+     11
#+     12
##

## In addition to `head`, `tail`, and `cons`, oh provides a number of
## convenience methods for dealing with lists. The `length` method, as
## expected, returns the length of a list. The `slice` method can be used
## to select a sublist. Individual elements of a list can be accessed
## and modified with the 'get' and 'set' methods, respectively. A list
## of indices can be obtained with the `keys` method.
##
## The commands,
##
#{
define a: list do re me
write: a::get 0
write: a::get -1
write: a::slice 1 2
a::set 0 foo
a::set 1 bar
a::set 2 baz
write $a
write: a::length
write: a::keys
#}
##
## produce the output,
##
#+     do
#+     me
#+     (re)
#+     (foo bar baz)
#+     3
#+     (0 1 2)
##

define common: import: ... common.oh

common::apply-predicates: cons 0 ()

#-     is-atom "x => false"
#-     is-boolean "x => false"
#-     is-builtin "x => false"
#-     is-channel "x => false"
#-     is-cons "x => true"
#-     is-continuation "x => false"
#-     is-float "x => false"
#-     is-integer "x => false"
#-     is-method "x => false"
#-     is-null "x => false"
#-     is-number "x => false"
#-     is-object "x => false"
#-     is-pipe "x => false"
#-     is-rational "x => false"
#-     is-status "x => false"
#-     is-string "x => false"
#-     is-symbol "x => false"
#-     is-syntax "x => false"

