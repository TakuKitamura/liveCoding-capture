#!/usr/bin/env oh

mkdir /tmp/globs
cd /tmp/globs
touch a.1 b.2 3.go 4 .hidden

## ### File Name Generation
##
## The oh shell provides a mechanism for generating a list of file names that
## match a pattern. The patterns are called globs. The glob, `*.go` in the
## command,
##
#{
ls *.go
#}
##
## generates, as arguments to `ls`, all file names in the current directory
## that end in `.go`. The character * is a pattern that will match any string
## including the empty string. In general patterns are specified as follows.
##
## | Pattern | Action                                                         |
## |:-------:|:---------------------------------------------------------------|
## |   `*`   | Matches any sequence of zero or more characters.               |
## |   `?`   | Matches any single character.                                  |
## | `[...]` | Matches any one of the characters enclosed. A pair separated by a hyphen, `-`, will match a lexical range of characters. If the first enclosed character is a `^` the match is negated. |
##
## For example,
##
#{
ls [a-z]*
#}
##
## matches all names in the current directory beginning with on of the letters
## `a` through `z`, while,
##
#{
ls ?
#}
##
## matches all names in the current directory that consist of a single
## character.
##
## There is one exception to the general rules given for patterns. The
## character `.` at the start of a file name must be explicitly matched.
##
#{
echo *
#}
##
## will therefore echo all file names not beginning with a `.` in the current
## directory, while,
##
#{
echo .*
#}
##
## will echo all those file names that begin with `.` as the `.` was explicitly
## specified. This avoids inadvertent matching of the names `.` and `..` which
## mean the current directory and the parent directory, respectively.
##

#-     3.go
#-     a.1
#-     b.2
#-     4
#-     3.go 4 a.1 b.2
#-     .hidden

rm a.1 b.2 3.go 4 .hidden
cd $_origin_
rmdir /tmp/globs

