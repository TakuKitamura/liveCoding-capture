#!/usr/bin/env oh

## #### Integers
##
## In oh, things that look like integers are still symbols by default. To
## explicitly create an integer, the `integer` command can be used with an
## argument that will parse correctly as an integer.
##
## The command,
##
#{
write (integer -1)
#}
##
## produces the output,
##
#+     -1
##
## In the above example parentheses are used around the `integer` command to
## indicate that it should be evaluated and its value used as the argument
## to write. Oh has a convenient shorthand when a command is to be evaluated
## and the result of this evaluation used as the final argument of another
## command:
##
#{
write: integer -1
#}
#-     -1
##
## This shorthand is used often to avoid lots of irritating and
## superfluous parentheses when constructing more compilcated commands:
##
#{
write: is-integer -1
write: is-symbol -1
write: is-integer: integer -1
write: is-symbol: integer -1
#}
#-     false
#-     true
#-     true
#-     false
##
## Note that oh does not have infix arithmetic operators instead the commands
## `add`, `sub`, `mul`, `div` and `mod` must be used.
##
#{
write: sub 3 2 1
write: mul 1024 1024 16
write: div 65536 256
write: mod 511 256
#}
##

#-     0
#-     16777216
#-     256
#-     255

define common: import: ... common.oh

define operators: quote: add div eq ge gt is le lt mod mul ne sub
define operands: list 1 2 3 4
common::apply-operators $operators $operands

#-     add 1 1 => 2
#-     add 1 2 => 3
#-     add 1 3 => 4
#-     add 1 4 => 5
#-     add 2 1 => 3
#-     add 2 2 => 4
#-     add 2 3 => 5
#-     add 2 4 => 6
#-     add 3 1 => 4
#-     add 3 2 => 5
#-     add 3 3 => 6
#-     add 3 4 => 7
#-     add 4 1 => 5
#-     add 4 2 => 6
#-     add 4 3 => 7
#-     add 4 4 => 8
#-     div 1 1 => 1
#-     div 1 2 => 1/2
#-     div 1 3 => 1/3
#-     div 1 4 => 1/4
#-     div 2 1 => 2
#-     div 2 2 => 1
#-     div 2 3 => 2/3
#-     div 2 4 => 1/2
#-     div 3 1 => 3
#-     div 3 2 => 3/2
#-     div 3 3 => 1
#-     div 3 4 => 3/4
#-     div 4 1 => 4
#-     div 4 2 => 2
#-     div 4 3 => 4/3
#-     div 4 4 => 1
#-     eq 1 1 => true
#-     eq 1 2 => false
#-     eq 1 3 => false
#-     eq 1 4 => false
#-     eq 2 1 => false
#-     eq 2 2 => true
#-     eq 2 3 => false
#-     eq 2 4 => false
#-     eq 3 1 => false
#-     eq 3 2 => false
#-     eq 3 3 => true
#-     eq 3 4 => false
#-     eq 4 1 => false
#-     eq 4 2 => false
#-     eq 4 3 => false
#-     eq 4 4 => true
#-     ge 1 1 => true
#-     ge 1 2 => false
#-     ge 1 3 => false
#-     ge 1 4 => false
#-     ge 2 1 => true
#-     ge 2 2 => true
#-     ge 2 3 => false
#-     ge 2 4 => false
#-     ge 3 1 => true
#-     ge 3 2 => true
#-     ge 3 3 => true
#-     ge 3 4 => false
#-     ge 4 1 => true
#-     ge 4 2 => true
#-     ge 4 3 => true
#-     ge 4 4 => true
#-     gt 1 1 => false
#-     gt 1 2 => false
#-     gt 1 3 => false
#-     gt 1 4 => false
#-     gt 2 1 => true
#-     gt 2 2 => false
#-     gt 2 3 => false
#-     gt 2 4 => false
#-     gt 3 1 => true
#-     gt 3 2 => true
#-     gt 3 3 => false
#-     gt 3 4 => false
#-     gt 4 1 => true
#-     gt 4 2 => true
#-     gt 4 3 => true
#-     gt 4 4 => false
#-     is 1 1 => true
#-     is 1 2 => false
#-     is 1 3 => false
#-     is 1 4 => false
#-     is 2 1 => false
#-     is 2 2 => true
#-     is 2 3 => false
#-     is 2 4 => false
#-     is 3 1 => false
#-     is 3 2 => false
#-     is 3 3 => true
#-     is 3 4 => false
#-     is 4 1 => false
#-     is 4 2 => false
#-     is 4 3 => false
#-     is 4 4 => true
#-     le 1 1 => true
#-     le 1 2 => true
#-     le 1 3 => true
#-     le 1 4 => true
#-     le 2 1 => false
#-     le 2 2 => true
#-     le 2 3 => true
#-     le 2 4 => true
#-     le 3 1 => false
#-     le 3 2 => false
#-     le 3 3 => true
#-     le 3 4 => true
#-     le 4 1 => false
#-     le 4 2 => false
#-     le 4 3 => false
#-     le 4 4 => true
#-     lt 1 1 => false
#-     lt 1 2 => true
#-     lt 1 3 => true
#-     lt 1 4 => true
#-     lt 2 1 => false
#-     lt 2 2 => false
#-     lt 2 3 => true
#-     lt 2 4 => true
#-     lt 3 1 => false
#-     lt 3 2 => false
#-     lt 3 3 => false
#-     lt 3 4 => true
#-     lt 4 1 => false
#-     lt 4 2 => false
#-     lt 4 3 => false
#-     lt 4 4 => false
#-     mod 1 1 => 0
#-     mod 1 2 => 1
#-     mod 1 3 => 1
#-     mod 1 4 => 1
#-     mod 2 1 => 0
#-     mod 2 2 => 0
#-     mod 2 3 => 2
#-     mod 2 4 => 2
#-     mod 3 1 => 0
#-     mod 3 2 => 1
#-     mod 3 3 => 0
#-     mod 3 4 => 3
#-     mod 4 1 => 0
#-     mod 4 2 => 0
#-     mod 4 3 => 1
#-     mod 4 4 => 0
#-     mul 1 1 => 1
#-     mul 1 2 => 2
#-     mul 1 3 => 3
#-     mul 1 4 => 4
#-     mul 2 1 => 2
#-     mul 2 2 => 4
#-     mul 2 3 => 6
#-     mul 2 4 => 8
#-     mul 3 1 => 3
#-     mul 3 2 => 6
#-     mul 3 3 => 9
#-     mul 3 4 => 12
#-     mul 4 1 => 4
#-     mul 4 2 => 8
#-     mul 4 3 => 12
#-     mul 4 4 => 16
#-     ne 1 1 => false
#-     ne 1 2 => true
#-     ne 1 3 => true
#-     ne 1 4 => true
#-     ne 2 1 => true
#-     ne 2 2 => false
#-     ne 2 3 => true
#-     ne 2 4 => true
#-     ne 3 1 => true
#-     ne 3 2 => true
#-     ne 3 3 => false
#-     ne 3 4 => true
#-     ne 4 1 => true
#-     ne 4 2 => true
#-     ne 4 3 => true
#-     ne 4 4 => false
#-     sub 1 1 => 0
#-     sub 1 2 => -1
#-     sub 1 3 => -2
#-     sub 1 4 => -3
#-     sub 2 1 => 1
#-     sub 2 2 => 0
#-     sub 2 3 => -1
#-     sub 2 4 => -2
#-     sub 3 1 => 2
#-     sub 3 2 => 1
#-     sub 3 3 => 0
#-     sub 3 4 => -1
#-     sub 4 1 => 3
#-     sub 4 2 => 2
#-     sub 4 3 => 1
#-     sub 4 4 => 0

common::apply-predicates: integer -1

#-     is-atom "x => true"
#-     is-boolean "x => false"
#-     is-builtin "x => false"
#-     is-channel "x => false"
#-     is-cons "x => false"
#-     is-continuation "x => false"
#-     is-float "x => false"
#-     is-integer "x => true"
#-     is-method "x => false"
#-     is-null "x => false"
#-     is-number "x => true"
#-     is-object "x => false"
#-     is-pipe "x => false"
#-     is-rational "x => false"
#-     is-status "x => false"
#-     is-string "x => false"
#-     is-symbol "x => false"
#-     is-syntax "x => false"

