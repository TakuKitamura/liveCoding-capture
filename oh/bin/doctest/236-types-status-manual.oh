#!/usr/bin/env oh

## #### Status
##
## Typical Unix commands return 0 on success and non-zero on failure. This
## makes sense as there are many ways to fail but typicaly only one way to
## succeed. As a result, most Unix shells treat the zero value as true and
## non-zero values as false. This is unlike most other mainstream programming
## languages. To cause less confusion, oh introduces a status type. The status
## type is an integer that evaluates to true only when it has the value 0.
##
## The command,
##
#{
if (status 11) {
    echo "A zero status is true"
} else {
    echo "A non-zero status is false"
}
#}
##
## produces the output,
##
#+     A non-zero status is false
##

define common: import: ... common.oh

common::apply-predicates: status 0

#-     is-atom "x => true"
#-     is-boolean "x => false"
#-     is-builtin "x => false"
#-     is-channel "x => false"
#-     is-cons "x => false"
#-     is-continuation "x => false"
#-     is-float "x => false"
#-     is-integer "x => false"
#-     is-method "x => false"
#-     is-null "x => false"
#-     is-number "x => true"
#-     is-object "x => false"
#-     is-pipe "x => false"
#-     is-rational "x => false"
#-     is-status "x => true"
#-     is-string "x => false"
#-     is-symbol "x => false"
#-     is-syntax "x => false"

